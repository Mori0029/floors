module.exports = {
  parser: "@typescript-eslint/parser",
  parserOptions: {
    // project: "tsconfig.json",
    ecmaVersion: 2020,
    sourceType: "module",
  },
  extends: [
    "plugin:@typescript-eslint/recommended",
    "prettier/@typescript-eslint", // Uses eslint-config-prettier to disable ESLint rules from @typescript-eslint/eslint-plugin that would conflict with prettier
    "plugin:prettier/recommended", // Enables eslint-plugin-prettier and eslint-config-prettier. This will display prettier errors as ESLint errors. Make sure this is always the last configuration in the extends array.
  ],
  rules: {
    "@typescript-eslint/no-use-before-define": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/no-explicit-any": "warn",

    "no-console": "warn",
    "no-debugger": "warn",

    // "@typescript-eslint/no-misused-new": "error",
    // "@typescript-eslint/no-namespace": "error",
    // "@typescript-eslint/no-parameter-properties": "off",
    // "@typescript-eslint/no-require-imports": "off",
    // "@typescript-eslint/no-unused-expressions": "error",
    // "@typescript-eslint/no-var-requires": "off",
    // "@typescript-eslint/prefer-for-of": "error",
    // "@typescript-eslint/prefer-function-type": "error",
    // "@typescript-eslint/prefer-namespace-keyword": "error",
    // "@typescript-eslint/quotes": "off",
    // "@typescript-eslint/type-annotation-spacing": "off",
    // "@typescript-eslint/unified-signatures": "error",
    // "id-blacklist": [
    //   "warn",
    //   "any",
    //   "Number",
    //   "number",
    //   "String",
    //   "string",
    //   "Boolean",
    //   "boolean",
    //   "Undefined",
    //   "undefined",
    // ],
    // "linebreak-style": "off",
    // "no-empty": "error",
    // "no-eval": "error",
    // "no-extra-semi": "off",
    // "no-fallthrough": "off",
    // "no-invalid-this": "off",
    // "no-irregular-whitespace": "off",
    // "no-multiple-empty-lines": "off",
    // "no-new-wrappers": "error",
    "no-shadow": "warn",
    // "no-throw-literal": "error",
    // "no-trailing-spaces": "off",
    // "no-undef-init": "error",
    // "no-underscore-dangle": "warn",
    // "no-unsafe-finally": "error",
    // "no-unused-labels": "error",
    // "no-var": "error",
    // "object-shorthand": "error",
    // "one-var": ["error", "never"],
    // "prefer-arrow/prefer-arrow-functions": "error",
    // "prefer-const": "error",
    // "prefer-template": "error",
    // "quote-props": "off",
    // radix: "error",
    // "space-before-function-paren": "off",
    // "space-in-parens": ["off", "never"],
    // "spaced-comment": ["error", "always", { markers: ["/"] }],
    // "use-isnan": "error",
    // "valid-typeof": "off",
    // "@typescript-eslint/tslint/config": ["error", { rules: { "strict-string-expressions": true } }],
  },
};
